z
}
tmpp <- sapply(BHCsList, clean1)
head(tmpp)
tmp
txt
clean1(txt)
gsub(" ", "", clean1(txt))
gsub(" $", "", clean1(txt))
gsub(" $", "", tmpp[4])
gsub(" $", "", tmpp[5])
head(tmpp)
clean1 = function(z) {
punct <- punct <- '[]\\?!\"\'#$%&(){}+*/:;,._`|~\\[<=>@\\^]'
z <- gsub(punct, "", z)    # removes punctuation except hyphen
z <- gsub("Inc", "", z)            # removes "Inc"
z <- gsub("Corp", "Corporation", z)            # substitutes "Corp" for "Corporation"
z <- gsub(" $", "", z)              # removes blanks at the end
z
}
tmpp <- sapply(BHCsList, clean1)
head(tmpp)
head(BHCsList)
?gsub
head(tmpp)
head(BHCsList)
tail(BHCsList)
grep("Corp", BHCsList)
head(theData)
grep("Corp", theData$names)
grep("Corp", BHCsList)
grep("Atlantic Coast", BHCsList)
grep("Carolina Bank", BHCsList)
grep("Carolina Bank", BHCsList$names)
BHCsList$names[4040]
BHCsList$names[4040]
class(BHCsList$names)
class(BHCsList$tickers)
head(theList)
class(theList)
class(theList$NAMEHCR)
dim(theList)
theList <- read.csv("ActiveNonMutual_short.csv", stringsAsFactors = FALSE)
clas(theList)
class(theList)
dim(theList)
names(theList)
# read FDIC's list of active non-mutual banks
BHCsList <- read.csv("ActiveNonMutual_short.csv", stringsAsFactors = FALSE)
names(BHCsList) <- "names"
head(BHCsList)
dim(BHCsList)
BHCsList <- read.csv("ActiveNonMutual_short.csv", stringsAsFactors = FALSE)
head(BHCsList)
BHCsList[1]
BHCsList$names[1]
BHCsList$names[2]
names(BHCsList)
names(BHCsList) <- "names"
BHCsList$names[1]
BHCsList$names[2]
BHCsList$names[3]
BHCsList$names[4]
grep("Corp",BHCsList$names, value=TRUE)
grep("R Corp Financial", theData, value=TRUE)
grep("R Corp", theData, value=TRUE)
theData0
grep("Regions Financial",BHCsList$names, value=TRUE)
grep("F.N.B.",BHCsList$names, value=TRUE)
grep("FNB",BHCsList$names, value=TRUE)
grep("Midsouth",BHCsList$names, value=TRUE)
grep("Village Bank",BHCsList$names, value=TRUE)
grep("Peoples",BHCsList$names, value=TRUE)
grep("Peoples Financial",BHCsList$names, value=TRUE)
theData0
dim(BCHsList)
dim(BHCsList)
dim(unique(BHCsList)
)
tail(BHCsList)
tail(BHCsList,20)
theData
grep("Icici",BHCsList$names, value=TRUE)
grep("Ltd",BHCsList$names, value=TRUE)
theData
grep("Santander",BHCsList$names, value=TRUE)
class(grep("Santander",BHCsList$names, value=TRUE))
length(grep("Santander",BHCsList$names, value=TRUE))
length(grep("Bancolombia",BHCsList$names, value=TRUE))
length(grep("Itau",BHCsList$names, value=TRUE))
length(grep("Bradesco",BHCsList$names, value=TRUE))
length(grep("Royal",BHCsList$names, value=TRUE))
grep("Royal",BHCsList$names, value=TRUE)
grep("Barclays",BHCsList$names, value=TRUE)
grep("Credit Suisse",BHCsList$names, value=TRUE)
grep("Suisse",BHCsList$names, value=TRUE)
grep("HSBC",BHCsList$names, value=TRUE)
grep("Bilbao",BHCsList$names, value=TRUE)
grep("Fifth Third",BHCsList$names, value=TRUE)
grep("Santander",BHCsList$names, value=TRUE)
grep("Santander",BHCsList$names)
length(BHCsList$names)
length(unique(BHCsList$names))
theList <- theList["NAMEHCR"]
class(theList)
dim(theList)
theList <- unique(theList)
dim(theList)
BHCsList <- data.frame(names = BHCsList)
grep("Santander",BHCsList$names, value=TRUE)
grep("Santander",BHCsList$names)
theList <- theList["NAMEHCR"]
theList <- unique(theList)
BHCsList <- read.csv("ActiveNonMutual_short.csv", stringsAsFactors = FALSE)
class(BHCsList)
dim(BHCsList)
names(BHCsList)
BHCsList <- unique(BHCsList)
dim(BHCsList)
names(BHCsList) <- "names"
grep("Santander",BHCsList$names, value=TRUE)
write.table(BHCsList, "BHC_List.csv", row.names = FALSE, col.names = FALSE, sep = ",")
write.table(BHCsList, "BHC_List.csv", row.names = FALSE, col.names = FALSE, sep = ",")
source("cleanse.R")
theDataC <- sapply(theData, clean1)
BHCsListC <- sapply(BHCsList, clean1)
head(theDataC)
theDataC <- sapply(theData$names, clean1)
BHCsListC <- sapply(BHCsList, clean1)
head(theDataC)
heDataC <- sapply(theData, clean1)
BHCsListC <- sapply(BHCsList, clean1)
head(theDataC)
theDataC <- sapply(theData, clean1)
BHCsListC <- sapply(BHCsList, clean1)
head(theDataC)
head(theData)
theDataC <- theData
theDataC$names <- sapply(theData$names, clean1)
BHCsListC <- sapply(BHCsList, clean1)
head(theDataC)
source("cleanse.R")
theDataC <- theData
theDataC$names <- sapply(theData$names, clean1)
BHCsListC <- sapply(BHCsList, clean1)
head(theDataC)
tail(theDataC)
head(BHCsListC)
tail(BHCsListC)
head(theData)
grep("Santander",BHCsListC$names, value=TRUE)
class(theDataC)
class(BHCsListC)
BHCsListC <- data.frame(sapply(BHCsList, clean1))
class(BHCsListC)
grep("Santander",BHCsListC$names, value=TRUE)
grep("santander",BHCsListC$names, value=TRUE)
common <- merge(theDataC, BHCsListC)
dim(common)
head(common)
dim(theData0)
dim(theDataC)
353-260
InCommon <- merge(theDataC, BHCsListC)
inCommon <- merge(theDataC, BHCsListC)
notInCommon <-subset(theDataC, !(names %in% inCommon$names))
dim(theDataC)
dim(inCommon)
dim(notInCommon)
head(notInCommon)
grep("carolina", BHCsListC, value = TRUE)
grep("atlantic", BHCsListC, value = TRUE)
grep("yadkin", BHCsListC, value = TRUE)
grep("carolina", BHCsListC$names, value = TRUE)
source("cleanse.R")
# cleanses data
theDataC <- theData
theDataC$names <- sapply(theData$names, clean1)
BHCsListC <- data.frame(sapply(BHCsList, clean1))
# finds merge
inCommon <- merge(theDataC, BHCsListC)
# finds those banks not in the merge
notInCommon <-subset(theDataC, !(names %in% inCommon$names))
dim(theDataC)
dim(inCommon)
dim(notInCommon)
head(notInCommon)
grep("atlantic", BHCsListC$names, value = TRUE)
grep("yadkin", BHCsListC$names, value = TRUE)
grep("community one", BHCsListC$names, value = TRUE)
grep("towne", BHCsListC$names, value = TRUE)
grep("fcb", BHCsListC$names, value = TRUE)
grep("first", BHCsListC$names, value = TRUE)
grep("the first", BHCsListC$names, value = TRUE)
head(notInCommon)
head(notInCommon,20)
grep("carolina", BHCsListC$names, value = TRUE)
grep("bank of the", BHCsListC$names, value = TRUE)
dim(theDataC)
dim(notInCommon)
grep("hilltop", BHCsListC$names, value = TRUE)
tail,20(notInCommon)
tail(notInCommon,20)
grep("westpac", BHCsListC$names, value = TRUE)
grep("deutsche", BHCsListC$names, value = TRUE)
grep("bilbao", BHCsListC$names, value = TRUE)
dim(BHCsListC)
dim(theDataC)
dim(inCommon)
dim(notInCommon)
271+98
grep("bilbao", BHCsListC$names)
BHCsListC$names[2769]
class(BHCsListC$names)
BHCsList <- read.csv("ActiveNonMutual_short.csv", stringsAsFactors = FALSE)
BHCsList <- unique(BHCsList)
names(BHCsList) <- "names"
class(BHCsListC$names)
BHCsList <- read.csv("ActiveNonMutual_short.csv", stringsAsFactors = FALSE)
BHCsList <- unique(BHCsList)
names(BHCsList) <- "names"
class(BHCsListC$names)
?as.character
BHCsList <- read.csv("ActiveNonMutual_short.csv", stringsAsFactors = FALSE)
BHCsList <- unique(BHCsList)
names(BHCsList) <- "names"
BHCsList$names <- as.character(BHCsList$names)
write.table(BHCsList, "BHC_List.csv", row.names = FALSE, col.names = FALSE, sep = ",")
write.table(BHCsList, "BHC_List.csv", row.names = FALSE, col.names = FALSE, sep = ",")
source("cleanse.R")
theDataC <- theData
theDataC$names <- sapply(theData$names, clean1)
BHCsListC <- data.frame(sapply(BHCsList, clean1))
inCommon <- merge(theDataC, BHCsListC)
dim(theDataC)
dim(inCommon)
notInCommon <-subset(theDataC, !(names %in% inCommon$names))
dim(notInCommon)
chu <- subset(theDataC, (names %in% inCommon$names))
dim(chu)
inCommon <- merge(theDataC, BHCsListC, by = "names")
inCommon <- merge(theDataC, BHCsListC, by = "names")
dim(inCommon)
chu <- subset(theDataC, (names %in% inCommon$names))
dim(chu)
head(inCo)
head(inCommon)
grep("1st", theDataC, value=TRUE)
grep("1st", theDataC$names, value=TRUE)
head(inCommon)
grep("1st", theDataC$names, value=TRUE)
grep("1st", BCHsListC$names, value=TRUE)
grep("1st", BHCsListC$names, value=TRUE)
grep("access national", theDataC$names, value=TRUE)
grep("access national", BHCsListC$names, value=TRUE)
grep("ameris bankcorp", theDataC$names, value=TRUE)
grep("ameris bancorp", theDataC$names, value=TRUE)
grep("ameris bancorp", BHCsListC$names, value=TRUE)
library(dplyr)
notInCommon <- anti_join(theDataC, inCommon, by = "names")
dim(notInCommon)
dim(inCommon)
dim(theDataC)
?join
inCommon <- merge(BHCsListC, theDataC, by = "names")
dim(inCommon)
notInCommon <- anti_join(theDataC, inCommon, by = "names")
dim(notInCommon)
inCommon <- join(BHCsListC, theDataC, by = "names")
library(dplyr)
inCommon <- join(BHCsListC, theDataC, by = "names")
inCommon <- inner_join(BHCsListC, theDataC, by = "names")
inCommon <- inner_join(BHCsListC, theDataC, by = "names")
dim(inCommon)
notInCommon <- anti_join(theDataC, inCommon, by = "names")
dim(notInCommon)
head(inCommon)
grep("auburn national", theDataC, value=TRUE)
grep("auburn national", theDataC$names, value=TRUE)
grep("auburn national", BHCsListC$names, value=TRUE)
dim(theDataC)
dim(inCommon)
nott <- theDataC[!theDataC$names %in% inCommon$names,]
dim(nott)
names(theData)
resultos <- data.frame()
resultos <- rbind(resultos, theDataC[1,])
resultos
resultos <- data.frame()
for(i in dim(BHCsListC)[1]){
for(j in dim(theDataC)[1]){
if(BHCsListC$names[i] == theDataC$names[j]){
resultos <- rbind(resultos, theDataC[j,])
}
}
}
dim(resultos)
resultos <- data.frame()
for(i in dim(BHCsListC)[1]){
for(j in dim(theDataC)[1]){
if(BHCsListC$names[i] == theDataC$names[j]){
resultos <- rbind(resultos, theDataC[j,])
}
}
}
dim(resultos)
BHCsListC$names[1]
class(BHCsListC$names)
class(BHCsList$names)
theDataC <- theData
theDataC$names <- sapply(theData$names, clean1)
BHCsListC <- data.frame(sapply(BHCsList, clean1))
BHCsListC$names <- as.character(BHCsListC$names)
theDataC$names[1]
grep("carolina bank", BHCsListC$names, value = TRUE)
grep("carolina bank", BHCsListC$names)
BHCsListC$names[3512]
BHCsListC$names[3512] == theDataC$names[1]
resultos <- data.frame()
for(i in dim(BHCsListC)[1]){
for(j in dim(theDataC)[1]){
if(BHCsListC$names[i] == theDataC$names[j]){
resultos <- rbind(resultos, theDataC[j,])
}
}
}
dim(resultos)
if(BHCsListC$names[3512] == theDataC$names[1]) {resultos <- rbind(resultos, theDataC[1,])}
resultos
dim(BHCsListC)[1]
dim(theDataC)[1]
# the hard way
resultos <- data.frame()
for(i in 1:dim(BHCsListC)[1]){
for(j in 1:dim(theDataC)[1]){
if(BHCsListC$names[i] == theDataC$names[j]){
resultos <- rbind(resultos, theDataC[j,])
}
}
}
dim(resultos)
dim(inCommon)
identical(inCommon, resultos)
resultos <- data.frame()
for(i in 1:dim(BHCsListC)[1]){
for(j in 1:dim(theDataC)[1]){
if(BHCsListC$names[i] == theDataC$names[j]){
resultos <- rbind(resultos, theDataC[j,])
break
}
}
}
dim(resultos)
unique(theDataC)
dim(unique(theDataC))
dim(theDataC)
dim(unique(BHCsListC))
dim(BHCsListC)
duplicated(BHCsListC)
BHCsListCV[duplicated(BHCsListC),]
BHCsListC[duplicated(BHCsListC),]
grep("union bankshares", BHCsListC, value = TRUE)
grep("union bankshares", BHCsListC$names, value = TRUE)
BHCsList <- read.csv("ActiveNonMutual_short.csv", stringsAsFactors = FALSE)
dim(BHCsList)
class(BHCsList)
head(BHCsList)
BHCsList <- unique(BHCsList)
dim(BHCsList)
names(BHCsList) <- "names"
head(BHCsList)
class(BHCsList$names)
BHCsListC <- data.frame(sapply(BHCsList, clean1))
dim(BHCsListC)
class(BHCsListC$names)
BHCsListC$names <- as.character(BHCsListC$names)
dim(BHCsListC)
dim(theDataC)
suu <- theDataC[unique(theDataC),]
unique(theDataC)
dim(theDataC)
resultos <- data.frame()
for(i in 1:dim(BHCsListC)[1]){
for(j in 1:dim(theDataC)[1]){
if(BHCsListC$names[i] == theDataC$names[j]){
resultos <- rbind(resultos, theDataC[j,])
break
}
}
}
dim(resultos)
dim(inCommon)
sum(unique(theDataC))
dim(unique(theDataC))
dim(theDataC)
dim(unique(BHCsListC))
dim(BHCsListC)
dupps <- BHCsListC[duplicated(BHCsListC),]
dim(dupps)
duplicated(BHCsListC)
dupps <- BHCsListC[duplicated(BHCsListC),]
dim(dupps)
dim(BHCsListC)
exam <- data.frame(aa=c(1, 2, 3, 3, 4, 5))
duplicated(exam)
exam[duplicated(exam)]
exam[duplicated(exam),]
BHCsListC[duplicated(BHCsListC),]
grep("village bancshares",BHCsListC, value = TRUE)
BHCsListC[duplicated(BHCsListC),]
grep("village bancshares",BHCsListC$names, value = TRUE)
grep("Village Bancshares",BHCsList$names, value = TRUE)
sum(duplicated(exam))
sum(duplicated(BHCsList))
sum(duplicated(BHCsListC))
dim(BHCsList)
dim(BHCsListC)
BHCsListC <- unique(BHCsListC)
dim(BHCsListC)
inCommon <- inner_join(BHCsListC, theDataC, by = "names")
dim(inCommon)
notInCommon <- anti_join(theDataC, inCommon, by = "names")
dim(notInCommon)
255+98
dim(theDataC)
resultas <- data.frame()
for(i in 1:dim(BHCsListC)[1]){
for(j in 1:dim(theDataC)[1]){
if(BHCsListC$names[i] == theDataC$names[j]){
resultos <- rbind(resultos, theDataC[j,])
}
}
}
dim(resultos)
255*2
resultas <- data.frame()
for(i in 1:dim(theDataC)[1]){
for(j in 1:dim(BHCsListC)[1]){
if(theDataC$names[i] == BHCsListC$names[j]){
resultos <- rbind(resultos, theDataC[i,])
break
}
}
}
dim(resultos)
resultas <- data.frame()
for(i in 1:dim(theDataC)[1]){
for(j in 1:dim(BHCsListC)[1]){
if(theDataC$names[i] == BHCsListC$names[j]){
resultas <- rbind(resultas, theDataC[i,])
break
}
}
}
dim(resultas)
rm(resultos)
rm(resultas)
rm(tmpp)
rm(theList)
rm(theListF)
rm(theListFF)
rm(dupps)
rm(common,chu)
rm(exam)
rm(nott)
rm(InCommon)
rm(heDataC)
theData <- read.csv("allBanks.csv")
head(theData)
dim(theData)
BHCsList <- read.csv("ActiveNonMutual_short.csv", stringsAsFactors = FALSE)
BHCsList <- unique(BHCsList)
names(BHCsList) <- "names"
# saves cleaned list of BHCs
write.table(BHCsList, "BHC_List.csv", row.names = FALSE, col.names = FALSE, sep = ",")
# invokes cleansing function
source("cleanse.R")
# cleanses data
theDataC <- theData
theDataC$names <- sapply(theData$names, clean1)
BHCsListC <- data.frame(sapply(BHCsList, clean1))
BHCsListC$names <- as.character(BHCsListC$names)
BHCsListC <- unique(BHCsListC)
# finds merge
inCommon <- inner_join(BHCsListC, theDataC, by = "names")
# finds those banks not in the merge
notInCommon <- anti_join(theDataC, inCommon, by = "names")
dim(theDataC)
dim(inCommon)
dim(notInCommon)
255+98
head(notInCommon)
grep("old national", BHCsListC, value=TRUE)
head(notInCommon)
grep("old national", BHCsListC$names, value=TRUE)
grep("commerce union", BHCsListC$names, value=TRUE)
grep("stonegate", BHCsListC$names, value=TRUE)
grep("bancolombia", BHCsListC$names, value=TRUE)
grep("bofi", BHCsListC$names, value=TRUE)
grep("southside", BHCsListC$names, value=TRUE)
write.csv(theData, "BHCsAndTickers.csv", row.names = FALSE)
x <- BHCsListC
y <- theDataC
signature=function(x){
sig=paste(sort(unlist(strsplit(tolower(x)," "))),collapse='')
return(sig)
}
xx=data.frame(sig=sapply(x, signature),row.names=NULL)
yy=data.frame(sig=sapply(y, signature),row.names=NULL)
head(xx)
xx[1]
head(yy)
